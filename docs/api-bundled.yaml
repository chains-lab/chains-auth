openapi: 3.1.1
info:
  title: Cifra SSO REST API
  description: SSO REST API for Cifra app
  version: 0.0.1
paths:
  /chains/auth/v1/own:
    get:
      tags:
        - User
      summary: Get user
      description: Endpoint to get user
      responses:
        '201':
          description: User successfully get
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  /re-news/chains/auth/v1/own/refresh:
    post:
      tags:
        - Sessions
      summary: Refresh Access Token
      description: Endpoint to refresh an expired access token using a valid refresh token.
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Access token successfully refreshed.
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/TokensPair'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/Internal'
  /re-news/chains/auth/v1/own/login:
    post:
      tags:
        - Login
      description: Endpoint to login use google user
      responses:
        '302':
          description: Redirect to Google callback endpoint
          headers:
            Location:
              description: URL for redirection
              schema:
                type: string
                example: /re-news/chains/auth/v1/own/callback
        '500':
          $ref: '#/components/responses/Internal'
  /re-news/chains/auth/v1/own/callback:
    post:
      tags:
        - Login
      description: Endpoint to login use google user
      responses:
        '201':
          description: User successfully login
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/TokensPair'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '500':
          $ref: '#/components/responses/Internal'
  /re-news/chains/auth/v1/own/logout:
    post:
      tags:
        - Login
      description: Endpoint to logout user
      responses:
        '201':
          description: User successfully logout
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/TokensPair'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /re-news/chains/auth/v1/own/sessions:
    get:
      tags:
        - Sessions
      summary: Get user's sessions
      description: Endpoint to get user's sessions
      responses:
        '201':
          description: Successfully
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SessionsCollection'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/Internal'
    delete:
      tags:
        - Sessions
      summary: Terminate user's sessions
      description: Endpoint to terminate user's sessions
      responses:
        '201':
          description: successfully
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SessionsCollection'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  '/re-news/chains/auth/v1/own/sessions/{session_id}':
    parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Sessions
      summary: Get user's session
      description: Endpoint to get user's session
      responses:
        '201':
          description: User sessions successfully get
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
    delete:
      tags:
        - Sessions
      summary: Terminate user's session
      description: Endpoint to terminate user's session
      responses:
        '201':
          description: successfully
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SessionsCollection'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  '/re-news/chains/auth/v1/admin/{user_id}':
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Admin
      summary: admin get user
      description: Endpoint to get user
      responses:
        '200':
          description: User successfully get
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  '/re-news/chains/auth/v1/admin/{user_id}/{role}':
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      - name: role
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Admin
      summary: admin role update
      description: Endpoint to update user
      responses:
        '200':
          description: User successfully updated
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  '/re-news/chains/auth/v1/admin/{user_id}/sessions':
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Admin
      summary: admin get sessions
      description: Endpoint to get user if you admin
      responses:
        '200':
          description: User sessions successfully get
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/SessionsCollection'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
    delete:
      tags:
        - Admin
      summary: admin delete user
      description: Endpoint to delete user if you admin
      responses:
        '204':
          description: User successfully logout
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
  '/re-news/chains/auth/v1/admin/{user_id}/sessions/{session_id}':
    parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      - name: session_id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Admin
      summary: admin get session
      description: Endpoint to get user if you admin
      responses:
        '200':
          description: User sessions successfully get
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/InvalidParameter'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Internal'
components:
  schemas:
    TokensPair:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
            - relationships
          properties:
            type:
              type: string
              enum:
                - tokens_pair
            attributes:
              type: object
              required:
                - access_token
                - refresh_token
              properties:
                access_token:
                  type: string
                  description: Access Token
                refresh_token:
                  type: string
                  description: Refresh Token
    RefreshToken:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - refresh_token
            attributes:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: The refresh token to generate a new access token.
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    AccessToken:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - access_token
            attributes:
              type: object
              required:
                - access_token
              properties:
                refresh_token:
                  type: string
                  description: The access token to generate a new access token.
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    Session:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/SessionData'
    SessionData:
      type: object
      required:
        - id
        - type
        - attributes
      properties:
        id:
          type: string
          format: uuid
          description: session id
        type:
          type: string
          enum:
            - user_session
        attributes:
          $ref: '#/components/schemas/SessionAttributes'
    SessionAttributes:
      type: object
      required:
        - user_id
        - client
        - ip
        - created_at
        - last_used
      properties:
        user_id:
          type: string
          format: uuid
          description: user id
        client:
          type: string
          description: client name and version
        ip:
          type: string
          description: IP address
        created_at:
          type: string
          format: date-time
          description: session creation date
        last_used:
          type: string
          format: date-time
          description: last used date
    SessionsCollection:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - user_sessions
            attributes:
              type: object
              required:
                - sessions
              properties:
                sessions:
                  type: array
                  items:
                    $ref: '#/components/schemas/SessionData'
    User:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              description: User ID
            type:
              type: string
              enum:
                - user
            attributes:
              type: object
              required:
                - email
                - role
                - subscription
                - created_at
                - updated_at
              properties:
                email:
                  type: string
                  description: Email
                role:
                  type: string
                  description: Role
                subscription:
                  type: string
                  description: Subscription
                created_at:
                  type: string
                  format: date-time
                  description: Created At
                updated_at:
                  type: string
                  format: date-time
                  description: Updated At
    Errors:
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          description: Non empty array of errors occurred during request processing
          items:
            type: object
            required:
              - status
              - title
              - code
              - detail
              - meta
            properties:
              status:
                type: integer
                description: Status is the HTTP status code applicable to this problem
                example: 400
                enum:
                  - 400
                  - 401
                  - 403
                  - 404
                  - 405
                  - 408
                  - 409
                  - 415
                  - 429
                  - 500
              title:
                type: string
                description: 'Title is a short, human-readable summary of the problem'
                example: Bad Request
              code:
                type: string
                description: 'Code is an application-specific error code, expressed as a string'
                example: invalid_request
              detail:
                type: string
                description: Detail is a human-readable explanation specific to this occurrence of the problem
                example: Request body was expected
              meta:
                type: object
                required:
                  - error_id
                  - request_id
                  - timestamp
                properties:
                  error_id:
                    type: string
                    description: 'Error ID is a unique identifier for the error, used for debugging and tracing'
                    example: 0987654321fedcba
                  request_id:
                    type: string
                    description: 'Request ID is a unique identifier for the request, used for debugging and tracing'
                    example: 1234567890abcdef
                  parameter:
                    type: string
                    description: 'Parameter is the name of the request parameter that caused the error, if applicable'
                    example: email
                  pointer:
                    type: string
                    description: 'Pointer is a JSON Pointer that identifies the part of the request document that caused the error, if applicable'
                    example: /data/attributes/email
                  timestamp:
                    type: string
                    format: date-time
                    description: 'Timestamp is the time when the error occurred, in ISO 8601 format'
                    example: '2023-10-01T12:34:56Z'
  responses:
    InvalidParameter:
      description: One of the parameters is invalid. Refer to the response body for details.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    Unauthorized:
      description: You must provide a valid authorization params.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    NotFound:
      description: Requested resource does not exist.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    Forbidden:
      description: Forbidden
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    Internal:
      description: Internal server error
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    Conflict:
      description: Conflict
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    TooManyRequests:
      description: Too many requests
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    InvalidPointer:
      description: invalid pointer. Refer to the response body for details.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
    InvalidQuery:
      description: invalid query. Refer to the response body for details.
      content:
        application/vnd.api+json:
          schema:
            $ref: '#/components/schemas/Errors'
