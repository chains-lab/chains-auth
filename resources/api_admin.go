/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AdminAPIService AdminAPI service
type AdminAPIService service

type ApiReNewsChainsAuthV1AdminAccountIdGetRequest struct {
	ctx context.Context
	ApiService *AdminAPIService
	accountId string
}

func (r ApiReNewsChainsAuthV1AdminAccountIdGetRequest) Execute() (*Account, *http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1AdminAccountIdGetExecute(r)
}

/*
ReNewsChainsAuthV1AdminAccountIdGet admin get user

Endpoint to get user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiReNewsChainsAuthV1AdminAccountIdGetRequest
*/
func (a *AdminAPIService) ReNewsChainsAuthV1AdminAccountIdGet(ctx context.Context, accountId string) ApiReNewsChainsAuthV1AdminAccountIdGetRequest {
	return ApiReNewsChainsAuthV1AdminAccountIdGetRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return Account
func (a *AdminAPIService) ReNewsChainsAuthV1AdminAccountIdGetExecute(r ApiReNewsChainsAuthV1AdminAccountIdGetRequest) (*Account, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Account
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.ReNewsChainsAuthV1AdminAccountIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news/chains/auth/v1/admin/{account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReNewsChainsAuthV1AdminAccountIdSessionsDeleteRequest struct {
	ctx context.Context
	ApiService *AdminAPIService
	accountId string
}

func (r ApiReNewsChainsAuthV1AdminAccountIdSessionsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1AdminAccountIdSessionsDeleteExecute(r)
}

/*
ReNewsChainsAuthV1AdminAccountIdSessionsDelete admin delete user

Endpoint to delete user if you admin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiReNewsChainsAuthV1AdminAccountIdSessionsDeleteRequest
*/
func (a *AdminAPIService) ReNewsChainsAuthV1AdminAccountIdSessionsDelete(ctx context.Context, accountId string) ApiReNewsChainsAuthV1AdminAccountIdSessionsDeleteRequest {
	return ApiReNewsChainsAuthV1AdminAccountIdSessionsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
func (a *AdminAPIService) ReNewsChainsAuthV1AdminAccountIdSessionsDeleteExecute(r ApiReNewsChainsAuthV1AdminAccountIdSessionsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.ReNewsChainsAuthV1AdminAccountIdSessionsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news/chains/auth/v1/admin/{account_id}/sessions"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReNewsChainsAuthV1AdminAccountIdSessionsGetRequest struct {
	ctx context.Context
	ApiService *AdminAPIService
	accountId string
}

func (r ApiReNewsChainsAuthV1AdminAccountIdSessionsGetRequest) Execute() (*SessionsCollection, *http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1AdminAccountIdSessionsGetExecute(r)
}

/*
ReNewsChainsAuthV1AdminAccountIdSessionsGet admin get sessions

Endpoint to get user if you admin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiReNewsChainsAuthV1AdminAccountIdSessionsGetRequest
*/
func (a *AdminAPIService) ReNewsChainsAuthV1AdminAccountIdSessionsGet(ctx context.Context, accountId string) ApiReNewsChainsAuthV1AdminAccountIdSessionsGetRequest {
	return ApiReNewsChainsAuthV1AdminAccountIdSessionsGetRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return SessionsCollection
func (a *AdminAPIService) ReNewsChainsAuthV1AdminAccountIdSessionsGetExecute(r ApiReNewsChainsAuthV1AdminAccountIdSessionsGetRequest) (*SessionsCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SessionsCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.ReNewsChainsAuthV1AdminAccountIdSessionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news/chains/auth/v1/admin/{account_id}/sessions"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGetRequest struct {
	ctx context.Context
	ApiService *AdminAPIService
	accountId string
	sessionId string
}

func (r ApiReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGetRequest) Execute() (*Session, *http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGetExecute(r)
}

/*
ReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGet admin get session

Endpoint to get user if you admin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @param sessionId
 @return ApiReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGetRequest
*/
func (a *AdminAPIService) ReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGet(ctx context.Context, accountId string, sessionId string) ApiReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGetRequest {
	return ApiReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		sessionId: sessionId,
	}
}

// Execute executes the request
//  @return Session
func (a *AdminAPIService) ReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGetExecute(r ApiReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGetRequest) (*Session, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Session
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.ReNewsChainsAuthV1AdminAccountIdSessionsSessionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news/chains/auth/v1/admin/{account_id}/sessions/{session_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"session_id"+"}", url.PathEscape(parameterValueToString(r.sessionId, "sessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReNewsChainsAuthV1PrivateAccountAccountIdGetRequest struct {
	ctx context.Context
	ApiService *AdminAPIService
	accountId string
}

func (r ApiReNewsChainsAuthV1PrivateAccountAccountIdGetRequest) Execute() (*Account, *http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1PrivateAccountAccountIdGetExecute(r)
}

/*
ReNewsChainsAuthV1PrivateAccountAccountIdGet admin get user

Endpoint to get user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiReNewsChainsAuthV1PrivateAccountAccountIdGetRequest
*/
func (a *AdminAPIService) ReNewsChainsAuthV1PrivateAccountAccountIdGet(ctx context.Context, accountId string) ApiReNewsChainsAuthV1PrivateAccountAccountIdGetRequest {
	return ApiReNewsChainsAuthV1PrivateAccountAccountIdGetRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return Account
func (a *AdminAPIService) ReNewsChainsAuthV1PrivateAccountAccountIdGetExecute(r ApiReNewsChainsAuthV1PrivateAccountAccountIdGetRequest) (*Account, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Account
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.ReNewsChainsAuthV1PrivateAccountAccountIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news//chains/auth/v1/private/account/{account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDeleteRequest struct {
	ctx context.Context
	ApiService *AdminAPIService
	accountId string
}

func (r ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDeleteExecute(r)
}

/*
ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDelete admin delete user

Endpoint to delete user if you admin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDeleteRequest
*/
func (a *AdminAPIService) ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDelete(ctx context.Context, accountId string) ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDeleteRequest {
	return ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
func (a *AdminAPIService) ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDeleteExecute(r ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news//chains/auth/v1/private/accounts/{account_id}/sessions"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGetRequest struct {
	ctx context.Context
	ApiService *AdminAPIService
	accountId string
}

func (r ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGetRequest) Execute() (*SessionsCollection, *http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGetExecute(r)
}

/*
ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGet admin get sessions

Endpoint to get user if you admin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @return ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGetRequest
*/
func (a *AdminAPIService) ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGet(ctx context.Context, accountId string) ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGetRequest {
	return ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGetRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
	}
}

// Execute executes the request
//  @return SessionsCollection
func (a *AdminAPIService) ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGetExecute(r ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGetRequest) (*SessionsCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SessionsCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news//chains/auth/v1/private/accounts/{account_id}/sessions"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGetRequest struct {
	ctx context.Context
	ApiService *AdminAPIService
	accountId string
	sessionId string
}

func (r ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGetRequest) Execute() (*Session, *http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGetExecute(r)
}

/*
ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGet admin get session

Endpoint to get user if you admin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @param sessionId
 @return ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGetRequest
*/
func (a *AdminAPIService) ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGet(ctx context.Context, accountId string, sessionId string) ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGetRequest {
	return ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		sessionId: sessionId,
	}
}

// Execute executes the request
//  @return Session
func (a *AdminAPIService) ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGetExecute(r ApiReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGetRequest) (*Session, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Session
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.ReNewsChainsAuthV1PrivateAccountsAccountIdSessionsSessionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news//chains/auth/v1/private/accounts/{account_id}/sessions/{session_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"session_id"+"}", url.PathEscape(parameterValueToString(r.sessionId, "sessionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
