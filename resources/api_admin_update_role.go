/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AdminUpdateRoleAPIService AdminUpdateRoleAPI service
type AdminUpdateRoleAPIService service

type ApiReNewsChainsAuthV1AdminAccountIdRolePatchRequest struct {
	ctx context.Context
	ApiService *AdminUpdateRoleAPIService
	accountId string
	role string
}

func (r ApiReNewsChainsAuthV1AdminAccountIdRolePatchRequest) Execute() (*Account, *http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1AdminAccountIdRolePatchExecute(r)
}

/*
ReNewsChainsAuthV1AdminAccountIdRolePatch admin role update

Endpoint to update user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @param role
 @return ApiReNewsChainsAuthV1AdminAccountIdRolePatchRequest
*/
func (a *AdminUpdateRoleAPIService) ReNewsChainsAuthV1AdminAccountIdRolePatch(ctx context.Context, accountId string, role string) ApiReNewsChainsAuthV1AdminAccountIdRolePatchRequest {
	return ApiReNewsChainsAuthV1AdminAccountIdRolePatchRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		role: role,
	}
}

// Execute executes the request
//  @return Account
func (a *AdminUpdateRoleAPIService) ReNewsChainsAuthV1AdminAccountIdRolePatchExecute(r ApiReNewsChainsAuthV1AdminAccountIdRolePatchRequest) (*Account, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Account
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUpdateRoleAPIService.ReNewsChainsAuthV1AdminAccountIdRolePatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news/chains/auth/v1/admin/{account_id}/{role}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role"+"}", url.PathEscape(parameterValueToString(r.role, "role")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReNewsChainsAuthV1PrivateAccountsAccountIdRolePatchRequest struct {
	ctx context.Context
	ApiService *AdminUpdateRoleAPIService
	accountId string
	role string
}

func (r ApiReNewsChainsAuthV1PrivateAccountsAccountIdRolePatchRequest) Execute() (*Account, *http.Response, error) {
	return r.ApiService.ReNewsChainsAuthV1PrivateAccountsAccountIdRolePatchExecute(r)
}

/*
ReNewsChainsAuthV1PrivateAccountsAccountIdRolePatch admin role update

Endpoint to update user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountId
 @param role
 @return ApiReNewsChainsAuthV1PrivateAccountsAccountIdRolePatchRequest
*/
func (a *AdminUpdateRoleAPIService) ReNewsChainsAuthV1PrivateAccountsAccountIdRolePatch(ctx context.Context, accountId string, role string) ApiReNewsChainsAuthV1PrivateAccountsAccountIdRolePatchRequest {
	return ApiReNewsChainsAuthV1PrivateAccountsAccountIdRolePatchRequest{
		ApiService: a,
		ctx: ctx,
		accountId: accountId,
		role: role,
	}
}

// Execute executes the request
//  @return Account
func (a *AdminUpdateRoleAPIService) ReNewsChainsAuthV1PrivateAccountsAccountIdRolePatchExecute(r ApiReNewsChainsAuthV1PrivateAccountsAccountIdRolePatchRequest) (*Account, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Account
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUpdateRoleAPIService.ReNewsChainsAuthV1PrivateAccountsAccountIdRolePatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/re-news//chains/auth/v1/private/accounts/{account_id}/{role}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_id"+"}", url.PathEscape(parameterValueToString(r.accountId, "accountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role"+"}", url.PathEscape(parameterValueToString(r.role, "role")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
