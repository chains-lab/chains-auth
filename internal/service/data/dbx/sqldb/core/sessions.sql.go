// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sessions.sql

package core

import (
	"context"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, token, client, IP)
VALUES ($1, $2, $3, $4 , $5)
RETURNING id, user_id, token, client, ip, created_at, last_used
`

type CreateSessionParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Token  string
	Client string
	Ip     string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.Client,
		arg.Ip,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Client,
		&i.Ip,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessions, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, token, client, ip, created_at, last_used FROM sessions
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Client,
		&i.Ip,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}

const getSessionsByUserID = `-- name: GetSessionsByUserID :many
SELECT id, user_id, token, client, ip, created_at, last_used FROM sessions
WHERE user_id = $1
`

func (q *Queries) GetSessionsByUserID(ctx context.Context, userID uuid.UUID) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.Client,
			&i.Ip,
			&i.CreatedAt,
			&i.LastUsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionToken = `-- name: UpdateSessionToken :one
UPDATE sessions
SET
    token = $3,
    IP = $4,
    last_used = now()
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, token, client, ip, created_at, last_used
`

type UpdateSessionTokenParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	Token  string
	Ip     string
}

func (q *Queries) UpdateSessionToken(ctx context.Context, arg UpdateSessionTokenParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSessionToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.Ip,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Client,
		&i.Ip,
		&i.CreatedAt,
		&i.LastUsed,
	)
	return i, err
}
