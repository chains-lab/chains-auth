// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accounts.sql

package sqlcore

import (
	"context"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    email,
    role
) VALUES (
    $1, $2
) RETURNING id, email, role, created_at, updated_at
`

type CreateAccountParams struct {
	Email string
	Role  string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Email, arg.Role)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, email, role, created_at, updated_at FROM accounts
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, email, role, created_at, updated_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountByID(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountRole = `-- name: UpdateAccountRole :one
UPDATE accounts SET
    role = $2
WHERE id = $1 RETURNING id, email, role, created_at, updated_at
`

type UpdateAccountRoleParams struct {
	ID   uuid.UUID
	Role string
}

func (q *Queries) UpdateAccountRole(ctx context.Context, arg UpdateAccountRoleParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountRole, arg.ID, arg.Role)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
